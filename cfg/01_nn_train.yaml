#
#
#
name: NN_training
#
#
#
#
dataload_params:
  shape_img: [240, 240]
  flg_check_completeness: False
  flg_random_shuffle: True
  seed_random_shuffle: 42
  # final_biotac_norm, final_biotac, max_biotac_norm, max_biotac, single_tac_norm
  index_tactile: 'final_biotac_norm'
  index_dofs: 'dof_pos_norm'        # dof_pos_norm or dof_pos
  index_coor: 'grasp_pixel_norm'    # grasp_pixel_norm or grasp_pixel

  dp_background: 0     # float 0.0, 1.0
  rgb_background: 0
  threshold_gq: 0.6   # 0, 0.6, ...
  flg_success: True   # only pick out successful grasp
  flg_single_tac: True    # grasp examples with single-channel tactile sensing

  threshold_max_grasps: 10    # 100000
  mean_vals: [0.485, 0.456, 0.406]    # from imagenet
  std_vals: [0.229, 0.224, 0.225]     # from imagenet

dataload_params_test:
  shape_img: [240, 240]
  flg_check_completeness: False
  flg_random_shuffle: True
  seed_random_shuffle: 42
  # final_biotac_norm, final_biotac, max_biotac_norm, max_biotac, single_tac_norm
  index_tactile: 'final_biotac_norm'
  index_dofs: 'dof_pos_norm'        # dof_pos_norm or dof_pos
  index_coor: 'grasp_pixel_norm'    # grasp_pixel_norm or grasp_pixel

  dp_background: 0     # float 0.0, 1.0
  rgb_background: 0
  threshold_gq: 0.6
  flg_success: True   # only pick out successful grasp
  flg_single_tac: True    # grasp examples with single-channel tactile sensing

  threshold_max_grasps: 10  # 5000
  mean_vals: [ 0.485, 0.456, 0.406 ]    # from imagenet
  std_vals: [ 0.229, 0.224, 0.225 ]     # from imagenet

graph:
  # dof_tac: [[0, 1,  2,  3,  4, 5, 6, 7,  9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23,  8,  8,  8,  8, 12, 12, 12, 16, 16, 20],
  #           [5, 9, 13, 17, 21, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 12, 16, 20, 24, 16, 20, 24, 20, 24, 24]]
  #
  #                  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
  graph_dof_tac: [ [ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 0    th_tac
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 1    ff_tac
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 2    mf_tac
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 3    rf_tac
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ],    # 4    lf_tac
                   [ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 5    thj1
                   [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 6    thj2
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 7    thj3
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 8    thj4
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 ],    # 9    thj5
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 10   ffj1
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 11   ffj2
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 12   ffj3
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 ],    # 13   ffj4
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 14   mfj1
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 15   mfj2
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 16   mfj3
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ],    # 17   mfj4
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ],    # 18   rfj1
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 ],    # 19   rfj2
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 ],    # 20   rfj3
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],    # 21   rfj4
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 ],    # 22   lfj1
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ],    # 23   lfj2
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 ],    # 24   lfj3
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ],    # 25   lfj4
                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],    # 26   lfj5
                   ]
#
#
#
#
training_params:
  flg_accelerate: False
  device: 'cuda:0'    # cpu, cuda:0, cuda:1, ...
  lr_adam: 0.0001 # learning rate
  batch_size: 6
  max_epochs: 101
  lr_opt_step: 10    # int  for lr_scheduler
  lr_opt_gamma: 0.8  # float
  # mean_vals: [0.485, 0.456, 0.406]    # from imagenet
  # std_vals: [0.229, 0.224, 0.225]     # from imagenet
#
test_params:
  batch_size: 6
#
#
#
NN_params:
  dropout: 0.4
  batch_first: True
  ################################################
  input:
    dim_img: [3, 240, 240] # int -> rgbd
    dim_pose: 6
    dim_tactile: 5   # 5*3
    dim_dofs: 22
  #################################################
  output:
    dim_pose: 6
    dim_gq: 1
    dim_suc: 1
    dim_dofs: 22
  #################################################
  structure:
    img_branch:
      channel_size: [128, 64, 32, 32]
      kernel_size: [9,   3,   3,   0]
      strides: [3,   2,   2,   0]
    share_branch:
      features: 2048
    coor_branch:
      channel_size: [32, 32]
    dir_branch:
      channel_size: [32, 32]
    gq_branch:
      channel_size: [32, 32]
    suc_branch:
      channel_size: [32, 32]
    dofs_branch:
      channel_size: [32, 32]


